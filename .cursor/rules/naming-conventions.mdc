---
alwaysApply: true
---

# Convenções de Nomenclatura

## Regras Gerais

- ✅ **Não usar abreviações**: Nomes claros e descritivos
- ✅ **Um export por arquivo**: Cada arquivo contém apenas um export
- ✅ **Evitar export default**: Preferir exports nomeados
- ✅ **Pastas**: Sempre `kebab-case` (exceto subpastas de services)

## Prefixos por Camada

1. **Features**: Prefixo com nome da feature
   - `ProdutoView`, `ProdutoController`, `useProdutoFiltros`
2. **Core**: Prefixo `Core`
   - `CoreButton`, `CoreUtils`, `CoreTypes`
3. **Shared**: Prefixo com nome do módulo
   - `AuthUtils`, `ApiService`, `useApiClient`

## Nomenclatura por Tipo de Arquivo

### Pastas

- **Formato**: `kebab-case`
- **Exemplos**: `produto`, `auth-js`, `user-profile`

### Componentes React

- **Formato**: `PascalCase.tsx`
- **Exemplos**: `ProdutoView.tsx`, `ProdutoCard.tsx`, `CoreButton.tsx`

### Hooks

- **Formato**: `camelCase.ts` com prefixo `use`
- **Exemplos**: `useProdutos.ts`, `useProdutoFiltros.ts`, `useApiClient.ts`
- **Mutações**: Ação primeiro → `useCreateUser.ts`, `useUpdateProposal.ts`

### Controllers

- **Formato**: `camelCase.ts` com prefixo `use` + sufixo `Controller`
- **Exemplos**: `useProdutoController.ts`, `useUserAuthController.ts`

### Interfaces TypeScript

- **Formato**: `PascalCase.ts`
- **Exemplos**: `Produto.ts`, `ProdutoFiltros.ts`, `User.ts`

### Schemas Zod

- **Formato**: `PascalCase.ts` com sufixo `Schema`
- **Exemplos**: `ProdutoSchema.ts`, `ProdutoFiltrosSchema.ts`

### Enums

- **Formato**: `PascalCase.ts` com sufixo `Enum`
- **Exemplos**: `ProdutoStatusEnum.ts`, `UserRoleEnum.ts`

### Services

- **Formato**: `PascalCase` + pasta com `index.ts`
- **Estrutura**:
  ```
  services/
  └── ProdutoService/
      ├── index.ts
      ├── gets.ts
      └── posts.ts
  ```

## Exemplos Corretos vs Incorretos

```typescript
// ✅ CORRETO
features / produto / components / ProdutoView.tsx;
features / produto / controllers / useProdutoController.ts;
features / produto / hooks / useProdutos.ts;
features / produto / interfaces / Produto.ts;
features / produto / schemas / ProdutoSchema.ts;
core / components / CoreButton.tsx;
shared / hooks / useApiClient.ts;

// ❌ INCORRETO
features / produto / components / produto - view.tsx; // kebab-case em arquivo
features / produto / controllers / ProdutoController.ts; // Sem prefixo 'use'
core / components / Button.tsx; // Sem prefixo 'Core'
features / produto / hooks / Produtos.ts; // Sem prefixo 'use'
```
