---
description: Guide for creating new features with proper structure
---

# Guia para Criar Nova Feature

## Estrutura de Pastas

Sempre crie a estrutura completa de diretórios:

```bash
features/[nome-feature]/
├── components/    # Views (.tsx)
├── controllers/   # Lógica de controle (.ts)
├── hooks/         # Hooks de dados (.ts)
├── interfaces/    # Tipos TypeScript (.ts)
├── schemas/       # Validação Zod (.ts)
├── enums/         # Enumerações (.ts)
├── mocks/         # Dados mockados (.ts)
└── services/      # API services (pastas/)
```

## Template Mínimo de Feature

### 1. Interface (`interfaces/MinhaFeature.ts`)

```typescript
export interface MinhaFeature {
  id: string;
  nome: string;
  criadoEm: Date;
  atualizadoEm: Date;
}
```

### 2. Schema Zod (`schemas/MinhaFeatureSchema.ts`)

```typescript
import { z } from "zod";

export const MinhaFeatureSchema = z.object({
  id: z.string().uuid(),
  nome: z.string().min(1).max(100),
  criadoEm: z.date(),
  atualizadoEm: z.date(),
});

export type MinhaFeatureForm = z.infer<typeof MinhaFeatureSchema>;
```

### 3. Enum (`enums/MinhaFeatureStatusEnum.ts`)

```typescript
export enum MinhaFeatureStatusEnum {
  ATIVO = "ATIVO",
  INATIVO = "INATIVO",
  PENDENTE = "PENDENTE",
}
```

### 4. Hook de Dados (`hooks/useMinhaFeatures.ts`)

```typescript
import { useState, useCallback } from "react";
import type { MinhaFeature } from "../interfaces/MinhaFeature";

export function useMinhaFeatures() {
  const [dados, setDados] = useState<MinhaFeature[]>([]);
  const [loading, setLoading] = useState(false);

  const buscar = useCallback(async () => {
    setLoading(true);
    // Implementar busca
    setLoading(false);
  }, []);

  return { dados, loading, buscar };
}
```

### 5. Controller (`controllers/useMinhaFeatureController.ts`)

```typescript
import { useState, useCallback } from "react";
import type { MinhaFeature } from "../interfaces/MinhaFeature";

export function useMinhaFeatureController() {
  const [selecionado, setSelecionado] = useState<MinhaFeature | null>(null);

  const selecionar = useCallback((item: MinhaFeature) => {
    setSelecionado(item);
  }, []);

  const limpar = useCallback(() => {
    setSelecionado(null);
  }, []);

  return {
    selecionado,
    selecionar,
    limpar,
  };
}
```

### 6. View Component (`components/MinhaFeatureView.tsx`)

```typescript
import { useMinhaFeatures } from "../hooks/useMinhaFeatures";
import { useMinhaFeatureController } from "../controllers/useMinhaFeatureController";

export function MinhaFeatureView() {
  const { dados, loading } = useMinhaFeatures();
  const { selecionado, selecionar } = useMinhaFeatureController();

  if (loading) return <div>Carregando...</div>;

  return (
    <div>
      {dados.map((item) => (
        <div key={item.id} onClick={() => selecionar(item)}>
          {item.nome}
        </div>
      ))}
    </div>
  );
}
```

### 7. Service (`services/MinhaFeatureService/index.ts`)

```typescript
import { gets } from "./gets";
import { posts } from "./posts";

export const MinhaFeatureService = {
  ...gets,
  ...posts,
};
```

```typescript
// services/MinhaFeatureService/gets.ts
import type { MinhaFeature } from "../../interfaces/MinhaFeature";

export const gets = {
  async buscarTodos(): Promise<MinhaFeature[]> {
    // Implementar chamada API
    return [];
  },

  async buscarPorId(id: string): Promise<MinhaFeature | null> {
    // Implementar chamada API
    return null;
  },
};
```

```typescript
// services/MinhaFeatureService/posts.ts
import type { MinhaFeature } from "../../interfaces/MinhaFeature";

export const posts = {
  async criar(dados: Omit<MinhaFeature, "id">): Promise<MinhaFeature> {
    // Implementar chamada API
    throw new Error("Não implementado");
  },

  async atualizar(
    id: string,
    dados: Partial<MinhaFeature>
  ): Promise<MinhaFeature> {
    // Implementar chamada API
    throw new Error("Não implementado");
  },
};
```

## Página no App Router

```typescript
// app/minha-feature/page.tsx
import { MinhaFeatureView } from "@/features/minha-feature/components/MinhaFeatureView";

export default function MinhaFeaturePage() {
  return <MinhaFeatureView />;
}
```

## Checklist de Nova Feature

- [ ] Criar estrutura de pastas completa
- [ ] Definir interface TypeScript
- [ ] Criar schema Zod para validação
- [ ] Criar enums necessários
- [ ] Implementar hook de dados
- [ ] Implementar controller
- [ ] Criar componente View
- [ ] Implementar service de API
- [ ] Criar página no App Router
- [ ] Adicionar testes (se aplicável)
