---
alwaysApply: true
---

# Arquitetura do Projeto - Base Frontend Next.js 15

## Stack Principal

- **Next.js 15.5.3** com App Router e React 19
- **TypeScript 5** com modo estrito
- **TailwindCSS 4** para estilização
- **TanStack Query 5.90** para estado servidor
- **React Hook Form + Zod** para formulários
- **NextAuth.js v5** para autenticação
- **Biome 2.2** para linting/formatting

## Princípios Arquiteturais

Este projeto segue uma **arquitetura feature-based modular** com padrão **Hook Controller + View**:

1. **Feature-based**: Cada funcionalidade auto-contida em `features/[nome]/`
2. **Hook Controller + View**: Separação entre lógica (controllers/hooks) e apresentação (components)
3. **Shared Resources**: Recursos reutilizáveis em `shared/`
4. **Libs Integration**: Integrações externas em `libs/`
5. **Core Utilities**: Utilitários base em `core/`

## Estrutura de Diretórios

```
├── app/           # Next.js App Router (rotas e páginas)
├── features/      # Features modulares (1 domínio específico)
│   └── [feature]/
│       ├── components/   # Views (.tsx)
│       ├── controllers/  # Lógica de controle (.ts)
│       ├── hooks/        # Hooks de dados (.ts)
│       ├── interfaces/   # Tipos TypeScript (.ts)
│       ├── schemas/      # Validação Zod (.ts)
│       ├── enums/        # Enumerações (.ts)
│       ├── mocks/        # Dados mockados (.ts)
│       └── services/     # API services (pasta/)
├── shared/        # Recursos compartilhados (2+ domínios)
├── core/          # Utilitários base (0 domínios)
└── libs/          # Integrações externas (auth, utils)
```

## Fluxograma de Decisão de Localização

**Onde criar um arquivo?**

- 0 domínios → `core/`
- 1 domínio → `features/[dominio]/`
- 2+ domínios → `shared/`

## Imports

Use sempre alias `@/` configurado no tsconfig:

```typescript
import { ProdutoView } from "@/features/produto/components/ProdutoView";
import type { Produto } from "@/features/produto/interfaces/Produto";
```
